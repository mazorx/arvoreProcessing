var parser, xmlDoc;
var habs;
var levels
var canvas;
var habs;
var rows = [];


function load(){
  var habs = $.ajax({
                    url: "https://gist.githubusercontent.com/mazorx/92fa50fecfdbfdb1d189f17bc4f875f9/raw/dc89ce183e91a21f0e3af04b27bbc3031390e863/habilidades.xml",
                    async: false
                 }).responseText;
    var x, i, txt, xmlDoc;
	parser = new DOMParser();
	
	canvas = document.getElementById("canv");
	canvas.width = screen.width;
	canvas.height = screen.height;
	
    txt = "";
    x = getTags("hability");
	habs = new Array(x.length);
    for (i = 0; i < x.length; i++) {
		habs[i] = new hability(x[i]);
		var checkrow = false;
		for(var r = 0; r < rows.length; r++){
			if(getTag("reqlvl",i) == rows[r]){
				checkrow = true;
			}
		}
		if(!checkrow){
			rows = rows.concat(getTag("reqlvl",i));
		}
    }
	rows.sort();
	chave(200,300,250,0);
}

function setPositions(){
	for(int i = 0; i < rows.length(); i++){
		
	}
}

function getTags(tag,xml=xmlstring){
	var c = xml.split("<"+tag+">").length -1;
	var toret = [];
	for(var i = 0; i < c; i++){
		try{
			toret[i] = getTag(tag,i,xml);
		}catch(err){
			try{
				toret.concat(getTag(tag,i,xml));
			}catch(err){
				
			}
		}
	}
	return toret;
}

function getTag(tag,i,xml=xmlstring){
	var toret = "";
		var s1 = xml.split("<"+tag+">")[i+1];
		toret = s1.split("</"+tag+">")[0].replace("	","");
		if(toret.substring(toret.length-1) == "\n"){
			toret = toret.substring(0,toret.length-1);
		}
	try{
	}catch(err){
	}
	return toret;
}

function safe_tags(str) {
    return str.replace(/&/g,'&amp;').replace(/</g,'&lt;');
}

function levelup(cod){
}

function createLine(x1, y1, x2, y2) {
    var a = x1 - x2,
        b = y1 - y2,
        c = Math.sqrt(a * a + b * b);

    var sx = (x1 + x2) / 2,
        sy = (y1 + y2) / 2;

    var x = sx - c / 2,
        y = sy;

    var alpha = Math.PI - Math.atan2(-b, a);

    return createLineElement(x, y, c, alpha);
}

function chave(x1,y1,x2,y2){
	var ctx = canvas.getContext("2d");
	ctx.beginPath();
	ctx.moveTo(x1, y1);
	var halfy = y1 > y2 ? (y1-y2)/2 : (y2-y1)/2;
	ctx.strokeStyle="#fff";
	ctx.bezierCurveTo(x1, y2, x2, y1, x2, y2);
	ctx.stroke();
}

class hability {
	constructor(xml){
		this.xml = xml;
		this.cod = getTag("cod",0,xml).split("\n")[0];
		this.img = getTag("image",0,xml);
		this.title = getTag("title",0,xml);
		this.type = getTag("type",0,xml);
		this.description = getTag("description",0,xml);
		this.reqhab = "-";
		this.reqhabtitle = "- ";
		this.reqlvl = "-";
		
		this.x = 0;
		this.y = 0;
		this.wid = 200;
		try{
			for(var e = 0; e < getTags("reqhab",xml).length; e++){
				if(reqhabtitle == "- "){
					reqhabtitle = "";
				}
				var reqhab = getTag("reqhab",e,xml).childNodes[0].nodeValue;
				for (e = 0; e < x.length; e++) {
					if(e == reqhab){
						reqhabtitle +=getTag("title")[e] + ", ";
					}
				}
			}
			reqhabtitle = reqhabtitle.substring(0,reqhabtitle.length-2);
			var reqlvl = getTag("reqlvl",i);
		}
		catch(err){
			
		}
		this.setHtml();
	}
	
	setHtml(){
		this.html = "<div id=\""+this.cod+"\" style=\"position:absolute;left:"+this.x+"px;top:"+this.y+"px;\" class=\"tooltip\"> <img onclick=\"levelup("+this.cod+")\" src=\""
		+ this.img
		+"\"/><br/>"
		+this.title
		+"<span class=\"tooltiptext\">"
		+this.title
		+"<br/>TIPO: "
		+this.type
		+"<br/>"
		+"PRÉ-REQUISITO: "
		+this.reqhabtitle + " | " + this.reqlvl
		+"<br/>"
		+this.description
		+"</span></div>";
	}
}

function getsubquant(cod){
	var x = xmlDoc.getElementsByTagName("hability");
	for(var i = 0;i < x.length;i++){
		
		if(x[i].getElementsByTagName("reqhab")){
			
		}
	}
}



var xmlstring = `<class>
	<rows>Lvl 1,Lvl 3,Lvl 6</rows>
	<hability>
		<cod>0
		</cod>
		<image>
		https://i.servimg.com/u/f58/16/36/10/96/0114.jpg
		</image>
		<title>
		Defender Impacto
		</title>
		<requires><reqhab></reqhab><reqlvl>1</reqlvl></requires>
		<type>
		Ativa (Defensiva)
		</type>
		<description>
		Ganhe +1 permanente para usar o movimento Defender.
		</description>
	</hability>
	
	<hability>
		<cod>1
		</cod>
		<image>
		https://i.servimg.com/u/f58/16/36/10/96/0214.jpg
		</image>
		<title>
		Pancada Corporal
		</title>
		<requires><reqhab></reqhab><reqlvl>1</reqlvl></requires>
		<type>
		Ativa (Ofensiva)
		</type>
		<description>
		Usa o próprio corpo para causar dano em um inimigo. O dano é equivalente a 1d6 +2 para cada 10 pontos de vida máxima.
		</description>
	</hability>
	
	<hability>
		<cod>1
		</cod>
		<image>
		https://i.servimg.com/u/f58/16/36/10/96/0214.jpg
		</image>
		<title>
		Pancada Corporal
		</title>
		<requires><reqhab>0</reqhab><reqlvl>3</reqlvl></requires>
		<type>
		Ativa (Ofensiva)
		</type>
		<description>
		Usaaa o próprio corpo para causar dano em um inimigo. O dano é equivalente a 1d6 +2 para cada 10 pontos de vida máxima.
		</description>
	</hability>
</class>`;
